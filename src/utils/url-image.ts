import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import NodeCache from 'node-cache';

// Cache for 5 minutes
const cache = new NodeCache({ stdTTL: 300 });

// Path to save images
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

/**
 * Generate a file and its temporarily URL 
 * 
 * @param image64 Meter image in base 64
 * @returns The short image address 
 */
export const generateUrl = (image64:string): string => {
  const base64Data = image64.replace(/^data:image\/\w+;base64,/, '');
  const filename = `${uuidv4()}.png`;
  const filePath = path.join(uploadsDir, filename);

  // Save image in the server
  fs.writeFile(filePath, base64Data, 'base64', (err) => {
    if (err) 
      throw err;
  });

  const id = uuidv4();
  // Store the image path on cache using the id (uuidv4)
  cache.set(id, filename);

  const tempUrl = `image/${id}`;
  
  return tempUrl;
};

/**
 * Retrieve the file path image 
 * 
 * @param imageId Image id (generated by node cache)
 * @returns File path of meter image
 */
export const getImageUrl = (imageId:string): string => {
  const filename = cache.get<string>(imageId);

  if (filename) {
    const filePath = path.join(uploadsDir, filename);

    return filePath;
  }
  
  throw new Error('URL has expired or is invalid');
};